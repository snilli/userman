// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user_test

import (
	"context"
	"userman/internal/domain/user"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Count(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockUserRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx
func (_e *MockUserRepository_Expecter) Count(ctx interface{}) *MockUserRepository_Count_Call {
	return &MockUserRepository_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockUserRepository_Count_Call) Run(run func(ctx context.Context)) *MockUserRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserRepository_Count_Call) Return(n int64, err error) *MockUserRepository_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUserRepository_Count_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockUserRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Create(ctx context.Context, user1 *user.User) (*user.User, error) {
	ret := _mock.Called(ctx, user1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) (*user.User, error)); ok {
		return returnFunc(ctx, user1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) *user.User); ok {
		r0 = returnFunc(ctx, user1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *user.User) error); ok {
		r1 = returnFunc(ctx, user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - user1
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, user1 interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, user1)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, user1 *user.User)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.User))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(user11 *user.User, err error) *MockUserRepository_Create_Call {
	_c.Call.Return(user11, err)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(ctx context.Context, user1 *user.User) (*user.User, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) DeleteByID(ctx context.Context, id string) (*user.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockUserRepository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepository_Expecter) DeleteByID(ctx interface{}, id interface{}) *MockUserRepository_DeleteByID_Call {
	return &MockUserRepository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", ctx, id)}
}

func (_c *MockUserRepository_DeleteByID_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_DeleteByID_Call) Return(user1 *user.User, err error) *MockUserRepository_DeleteByID_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserRepository_DeleteByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*user.User, error)) *MockUserRepository_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetAllID(ctx context.Context, id string, limit int, direction string) ([]*user.User, error) {
	ret := _mock.Called(ctx, id, limit, direction)

	if len(ret) == 0 {
		panic("no return value specified for GetAllID")
	}

	var r0 []*user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, string) ([]*user.User, error)); ok {
		return returnFunc(ctx, id, limit, direction)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, string) []*user.User); ok {
		r0 = returnFunc(ctx, id, limit, direction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, string) error); ok {
		r1 = returnFunc(ctx, id, limit, direction)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetAllID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllID'
type MockUserRepository_GetAllID_Call struct {
	*mock.Call
}

// GetAllID is a helper method to define mock.On call
//   - ctx
//   - id
//   - limit
//   - direction
func (_e *MockUserRepository_Expecter) GetAllID(ctx interface{}, id interface{}, limit interface{}, direction interface{}) *MockUserRepository_GetAllID_Call {
	return &MockUserRepository_GetAllID_Call{Call: _e.mock.On("GetAllID", ctx, id, limit, direction)}
}

func (_c *MockUserRepository_GetAllID_Call) Run(run func(ctx context.Context, id string, limit int, direction string)) *MockUserRepository_GetAllID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetAllID_Call) Return(users []*user.User, err error) *MockUserRepository_GetAllID_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserRepository_GetAllID_Call) RunAndReturn(run func(ctx context.Context, id string, limit int, direction string) ([]*user.User, error)) *MockUserRepository_GetAllID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByEmail(ctx context.Context, email string) (*user.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserRepository_GetByEmail_Call {
	return &MockUserRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) Return(user1 *user.User, err error) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*user.User, error)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByID(ctx context.Context, id string) (*user.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockUserRepository_GetByID_Call {
	return &MockUserRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUserRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByID_Call) Return(user1 *user.User, err error) *MockUserRepository_GetByID_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*user.User, error)) *MockUserRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Update(ctx context.Context, user1 *user.User) (*user.User, error) {
	ret := _mock.Called(ctx, user1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) (*user.User, error)); ok {
		return returnFunc(ctx, user1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) *user.User); ok {
		r0 = returnFunc(ctx, user1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *user.User) error); ok {
		r1 = returnFunc(ctx, user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - user1
func (_e *MockUserRepository_Expecter) Update(ctx interface{}, user1 interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", ctx, user1)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(ctx context.Context, user1 *user.User)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.User))
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(user11 *user.User, err error) *MockUserRepository_Update_Call {
	_c.Call.Return(user11, err)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(ctx context.Context, user1 *user.User) (*user.User, error)) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
