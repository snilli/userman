// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package common_test

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockEntity creates a new instance of MockEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntity {
	mock := &MockEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEntity is an autogenerated mock type for the Entity type
type MockEntity struct {
	mock.Mock
}

type MockEntity_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntity) EXPECT() *MockEntity_Expecter {
	return &MockEntity_Expecter{mock: &_m.Mock}
}

// GetChange provides a mock function for the type MockEntity
func (_mock *MockEntity) GetChange() map[string]any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChange")
	}

	var r0 map[string]any
	if returnFunc, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	return r0
}

// MockEntity_GetChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChange'
type MockEntity_GetChange_Call struct {
	*mock.Call
}

// GetChange is a helper method to define mock.On call
func (_e *MockEntity_Expecter) GetChange() *MockEntity_GetChange_Call {
	return &MockEntity_GetChange_Call{Call: _e.mock.On("GetChange")}
}

func (_c *MockEntity_GetChange_Call) Run(run func()) *MockEntity_GetChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_GetChange_Call) Return(stringToV map[string]any) *MockEntity_GetChange_Call {
	_c.Call.Return(stringToV)
	return _c
}

func (_c *MockEntity_GetChange_Call) RunAndReturn(run func() map[string]any) *MockEntity_GetChange_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function for the type MockEntity
func (_mock *MockEntity) GetID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEntity_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockEntity_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockEntity_Expecter) GetID() *MockEntity_GetID_Call {
	return &MockEntity_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockEntity_GetID_Call) Run(run func()) *MockEntity_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_GetID_Call) Return(s string) *MockEntity_GetID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEntity_GetID_Call) RunAndReturn(run func() string) *MockEntity_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// SetChange provides a mock function for the type MockEntity
func (_mock *MockEntity) SetChange(key string, value any) {
	_mock.Called(key, value)
	return
}

// MockEntity_SetChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetChange'
type MockEntity_SetChange_Call struct {
	*mock.Call
}

// SetChange is a helper method to define mock.On call
//   - key
//   - value
func (_e *MockEntity_Expecter) SetChange(key interface{}, value interface{}) *MockEntity_SetChange_Call {
	return &MockEntity_SetChange_Call{Call: _e.mock.On("SetChange", key, value)}
}

func (_c *MockEntity_SetChange_Call) Run(run func(key string, value any)) *MockEntity_SetChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any))
	})
	return _c
}

func (_c *MockEntity_SetChange_Call) Return() *MockEntity_SetChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEntity_SetChange_Call) RunAndReturn(run func(key string, value any)) *MockEntity_SetChange_Call {
	_c.Run(run)
	return _c
}
