// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package common_test

import (
	"userman/internal/application/common/service"
	common0 "userman/internal/domain/common"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCursorService creates a new instance of MockCursorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCursorService[T common0.Entity](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCursorService[T] {
	mock := &MockCursorService[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCursorService is an autogenerated mock type for the CursorService type
type MockCursorService[T common0.Entity] struct {
	mock.Mock
}

type MockCursorService_Expecter[T common0.Entity] struct {
	mock *mock.Mock
}

func (_m *MockCursorService[T]) EXPECT() *MockCursorService_Expecter[T] {
	return &MockCursorService_Expecter[T]{mock: &_m.Mock}
}

// BuildPaginated provides a mock function for the type MockCursorService
func (_mock *MockCursorService[T]) BuildPaginated(data []T, cursor *common.CursorData) (*common.CursorPaginated[T], error) {
	ret := _mock.Called(data, cursor)

	if len(ret) == 0 {
		panic("no return value specified for BuildPaginated")
	}

	var r0 *common.CursorPaginated[T]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]T, *common.CursorData) (*common.CursorPaginated[T], error)); ok {
		return returnFunc(data, cursor)
	}
	if returnFunc, ok := ret.Get(0).(func([]T, *common.CursorData) *common.CursorPaginated[T]); ok {
		r0 = returnFunc(data, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CursorPaginated[T])
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]T, *common.CursorData) error); ok {
		r1 = returnFunc(data, cursor)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCursorService_BuildPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildPaginated'
type MockCursorService_BuildPaginated_Call[T common0.Entity] struct {
	*mock.Call
}

// BuildPaginated is a helper method to define mock.On call
//   - data
//   - cursor
func (_e *MockCursorService_Expecter[T]) BuildPaginated(data interface{}, cursor interface{}) *MockCursorService_BuildPaginated_Call[T] {
	return &MockCursorService_BuildPaginated_Call[T]{Call: _e.mock.On("BuildPaginated", data, cursor)}
}

func (_c *MockCursorService_BuildPaginated_Call[T]) Run(run func(data []T, cursor *common.CursorData)) *MockCursorService_BuildPaginated_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]T), args[1].(*common.CursorData))
	})
	return _c
}

func (_c *MockCursorService_BuildPaginated_Call[T]) Return(cursorPaginated *common.CursorPaginated[T], err error) *MockCursorService_BuildPaginated_Call[T] {
	_c.Call.Return(cursorPaginated, err)
	return _c
}

func (_c *MockCursorService_BuildPaginated_Call[T]) RunAndReturn(run func(data []T, cursor *common.CursorData) (*common.CursorPaginated[T], error)) *MockCursorService_BuildPaginated_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Decode provides a mock function for the type MockCursorService
func (_mock *MockCursorService[T]) Decode(cursor string) (*common.CursorData, error) {
	ret := _mock.Called(cursor)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 *common.CursorData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*common.CursorData, error)); ok {
		return returnFunc(cursor)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *common.CursorData); ok {
		r0 = returnFunc(cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CursorData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(cursor)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCursorService_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockCursorService_Decode_Call[T common0.Entity] struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - cursor
func (_e *MockCursorService_Expecter[T]) Decode(cursor interface{}) *MockCursorService_Decode_Call[T] {
	return &MockCursorService_Decode_Call[T]{Call: _e.mock.On("Decode", cursor)}
}

func (_c *MockCursorService_Decode_Call[T]) Run(run func(cursor string)) *MockCursorService_Decode_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCursorService_Decode_Call[T]) Return(cursorData *common.CursorData, err error) *MockCursorService_Decode_Call[T] {
	_c.Call.Return(cursorData, err)
	return _c
}

func (_c *MockCursorService_Decode_Call[T]) RunAndReturn(run func(cursor string) (*common.CursorData, error)) *MockCursorService_Decode_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function for the type MockCursorService
func (_mock *MockCursorService[T]) Encode(data T, direction string, limit int) (string, error) {
	ret := _mock.Called(data, direction, limit)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(T, string, int) (string, error)); ok {
		return returnFunc(data, direction, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(T, string, int) string); ok {
		r0 = returnFunc(data, direction, limit)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(T, string, int) error); ok {
		r1 = returnFunc(data, direction, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCursorService_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockCursorService_Encode_Call[T common0.Entity] struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - data
//   - direction
//   - limit
func (_e *MockCursorService_Expecter[T]) Encode(data interface{}, direction interface{}, limit interface{}) *MockCursorService_Encode_Call[T] {
	return &MockCursorService_Encode_Call[T]{Call: _e.mock.On("Encode", data, direction, limit)}
}

func (_c *MockCursorService_Encode_Call[T]) Run(run func(data T, direction string, limit int)) *MockCursorService_Encode_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockCursorService_Encode_Call[T]) Return(s string, err error) *MockCursorService_Encode_Call[T] {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCursorService_Encode_Call[T]) RunAndReturn(run func(data T, direction string, limit int) (string, error)) *MockCursorService_Encode_Call[T] {
	_c.Call.Return(run)
	return _c
}
