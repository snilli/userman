// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package protov1_test

import (
	"context"
	"userman/internal/interface/grpc/gen/proto/v1"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockUserServiceClient creates a new instance of MockUserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserServiceClient {
	mock := &MockUserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserServiceClient is an autogenerated mock type for the UserServiceClient type
type MockUserServiceClient struct {
	mock.Mock
}

type MockUserServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserServiceClient) EXPECT() *MockUserServiceClient_Expecter {
	return &MockUserServiceClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserServiceClient
func (_mock *MockUserServiceClient) CreateUser(ctx context.Context, in *protov1.CreateUserRequest, opts ...grpc.CallOption) (*protov1.CreateUserResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *protov1.CreateUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *protov1.CreateUserRequest, ...grpc.CallOption) (*protov1.CreateUserResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *protov1.CreateUserRequest, ...grpc.CallOption) *protov1.CreateUserResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protov1.CreateUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *protov1.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserServiceClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserServiceClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockUserServiceClient_Expecter) CreateUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_CreateUser_Call {
	return &MockUserServiceClient_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_CreateUser_Call) Run(run func(ctx context.Context, in *protov1.CreateUserRequest, opts ...grpc.CallOption)) *MockUserServiceClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*protov1.CreateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_CreateUser_Call) Return(createUserResponse *protov1.CreateUserResponse, err error) *MockUserServiceClient_CreateUser_Call {
	_c.Call.Return(createUserResponse, err)
	return _c
}

func (_c *MockUserServiceClient_CreateUser_Call) RunAndReturn(run func(ctx context.Context, in *protov1.CreateUserRequest, opts ...grpc.CallOption) (*protov1.CreateUserResponse, error)) *MockUserServiceClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUserServiceClient
func (_mock *MockUserServiceClient) GetUser(ctx context.Context, in *protov1.GetUserRequest, opts ...grpc.CallOption) (*protov1.GetUserResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *protov1.GetUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *protov1.GetUserRequest, ...grpc.CallOption) (*protov1.GetUserResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *protov1.GetUserRequest, ...grpc.CallOption) *protov1.GetUserResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protov1.GetUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *protov1.GetUserRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserServiceClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserServiceClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockUserServiceClient_Expecter) GetUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_GetUser_Call {
	return &MockUserServiceClient_GetUser_Call{Call: _e.mock.On("GetUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_GetUser_Call) Run(run func(ctx context.Context, in *protov1.GetUserRequest, opts ...grpc.CallOption)) *MockUserServiceClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*protov1.GetUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_GetUser_Call) Return(getUserResponse *protov1.GetUserResponse, err error) *MockUserServiceClient_GetUser_Call {
	_c.Call.Return(getUserResponse, err)
	return _c
}

func (_c *MockUserServiceClient_GetUser_Call) RunAndReturn(run func(ctx context.Context, in *protov1.GetUserRequest, opts ...grpc.CallOption) (*protov1.GetUserResponse, error)) *MockUserServiceClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserServiceServer creates a new instance of MockUserServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserServiceServer {
	mock := &MockUserServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserServiceServer is an autogenerated mock type for the UserServiceServer type
type MockUserServiceServer struct {
	mock.Mock
}

type MockUserServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserServiceServer) EXPECT() *MockUserServiceServer_Expecter {
	return &MockUserServiceServer_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserServiceServer
func (_mock *MockUserServiceServer) CreateUser(context1 context.Context, createUserRequest *protov1.CreateUserRequest) (*protov1.CreateUserResponse, error) {
	ret := _mock.Called(context1, createUserRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *protov1.CreateUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *protov1.CreateUserRequest) (*protov1.CreateUserResponse, error)); ok {
		return returnFunc(context1, createUserRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *protov1.CreateUserRequest) *protov1.CreateUserResponse); ok {
		r0 = returnFunc(context1, createUserRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protov1.CreateUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *protov1.CreateUserRequest) error); ok {
		r1 = returnFunc(context1, createUserRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserServiceServer_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserServiceServer_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - context1
//   - createUserRequest
func (_e *MockUserServiceServer_Expecter) CreateUser(context1 interface{}, createUserRequest interface{}) *MockUserServiceServer_CreateUser_Call {
	return &MockUserServiceServer_CreateUser_Call{Call: _e.mock.On("CreateUser", context1, createUserRequest)}
}

func (_c *MockUserServiceServer_CreateUser_Call) Run(run func(context1 context.Context, createUserRequest *protov1.CreateUserRequest)) *MockUserServiceServer_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protov1.CreateUserRequest))
	})
	return _c
}

func (_c *MockUserServiceServer_CreateUser_Call) Return(createUserResponse *protov1.CreateUserResponse, err error) *MockUserServiceServer_CreateUser_Call {
	_c.Call.Return(createUserResponse, err)
	return _c
}

func (_c *MockUserServiceServer_CreateUser_Call) RunAndReturn(run func(context1 context.Context, createUserRequest *protov1.CreateUserRequest) (*protov1.CreateUserResponse, error)) *MockUserServiceServer_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUserServiceServer
func (_mock *MockUserServiceServer) GetUser(context1 context.Context, getUserRequest *protov1.GetUserRequest) (*protov1.GetUserResponse, error) {
	ret := _mock.Called(context1, getUserRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *protov1.GetUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *protov1.GetUserRequest) (*protov1.GetUserResponse, error)); ok {
		return returnFunc(context1, getUserRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *protov1.GetUserRequest) *protov1.GetUserResponse); ok {
		r0 = returnFunc(context1, getUserRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protov1.GetUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *protov1.GetUserRequest) error); ok {
		r1 = returnFunc(context1, getUserRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserServiceServer_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserServiceServer_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - context1
//   - getUserRequest
func (_e *MockUserServiceServer_Expecter) GetUser(context1 interface{}, getUserRequest interface{}) *MockUserServiceServer_GetUser_Call {
	return &MockUserServiceServer_GetUser_Call{Call: _e.mock.On("GetUser", context1, getUserRequest)}
}

func (_c *MockUserServiceServer_GetUser_Call) Run(run func(context1 context.Context, getUserRequest *protov1.GetUserRequest)) *MockUserServiceServer_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protov1.GetUserRequest))
	})
	return _c
}

func (_c *MockUserServiceServer_GetUser_Call) Return(getUserResponse *protov1.GetUserResponse, err error) *MockUserServiceServer_GetUser_Call {
	_c.Call.Return(getUserResponse, err)
	return _c
}

func (_c *MockUserServiceServer_GetUser_Call) RunAndReturn(run func(context1 context.Context, getUserRequest *protov1.GetUserRequest) (*protov1.GetUserResponse, error)) *MockUserServiceServer_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedUserServiceServer provides a mock function for the type MockUserServiceServer
func (_mock *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	_mock.Called()
	return
}

// MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedUserServiceServer'
type MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedUserServiceServer is a helper method to define mock.On call
func (_e *MockUserServiceServer_Expecter) mustEmbedUnimplementedUserServiceServer() *MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	return &MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedUserServiceServer")}
}

func (_c *MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call) Run(run func()) *MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call) Return() *MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call) RunAndReturn(run func()) *MockUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewMockUnsafeUserServiceServer creates a new instance of MockUnsafeUserServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnsafeUserServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUnsafeUserServiceServer is an autogenerated mock type for the UnsafeUserServiceServer type
type MockUnsafeUserServiceServer struct {
	mock.Mock
}

type MockUnsafeUserServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServer_Expecter {
	return &MockUnsafeUserServiceServer_Expecter{mock: &_m.Mock}
}

// mustEmbedUnimplementedUserServiceServer provides a mock function for the type MockUnsafeUserServiceServer
func (_mock *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	_mock.Called()
	return
}

// MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedUserServiceServer'
type MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedUserServiceServer is a helper method to define mock.On call
func (_e *MockUnsafeUserServiceServer_Expecter) mustEmbedUnimplementedUserServiceServer() *MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	return &MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedUserServiceServer")}
}

func (_c *MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call) Run(run func()) *MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call) Return() *MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call) RunAndReturn(run func()) *MockUnsafeUserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	_c.Run(run)
	return _c
}
