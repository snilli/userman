// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package middleware_test

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthMiddleware creates a new instance of MockAuthMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthMiddleware is an autogenerated mock type for the AuthMiddleware type
type MockAuthMiddleware struct {
	mock.Mock
}

type MockAuthMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthMiddleware) EXPECT() *MockAuthMiddleware_Expecter {
	return &MockAuthMiddleware_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function for the type MockAuthMiddleware
func (_mock *MockAuthMiddleware) Validate() gin.HandlerFunc {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 gin.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}
	return r0
}

// MockAuthMiddleware_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockAuthMiddleware_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *MockAuthMiddleware_Expecter) Validate() *MockAuthMiddleware_Validate_Call {
	return &MockAuthMiddleware_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *MockAuthMiddleware_Validate_Call) Run(run func()) *MockAuthMiddleware_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthMiddleware_Validate_Call) Return(handlerFunc gin.HandlerFunc) *MockAuthMiddleware_Validate_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockAuthMiddleware_Validate_Call) RunAndReturn(run func() gin.HandlerFunc) *MockAuthMiddleware_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoggingMiddleware creates a new instance of MockLoggingMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoggingMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoggingMiddleware {
	mock := &MockLoggingMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoggingMiddleware is an autogenerated mock type for the LoggingMiddleware type
type MockLoggingMiddleware struct {
	mock.Mock
}

type MockLoggingMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoggingMiddleware) EXPECT() *MockLoggingMiddleware_Expecter {
	return &MockLoggingMiddleware_Expecter{mock: &_m.Mock}
}

// Log provides a mock function for the type MockLoggingMiddleware
func (_mock *MockLoggingMiddleware) Log() gin.HandlerFunc {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 gin.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}
	return r0
}

// MockLoggingMiddleware_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockLoggingMiddleware_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
func (_e *MockLoggingMiddleware_Expecter) Log() *MockLoggingMiddleware_Log_Call {
	return &MockLoggingMiddleware_Log_Call{Call: _e.mock.On("Log")}
}

func (_c *MockLoggingMiddleware_Log_Call) Run(run func()) *MockLoggingMiddleware_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoggingMiddleware_Log_Call) Return(handlerFunc gin.HandlerFunc) *MockLoggingMiddleware_Log_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockLoggingMiddleware_Log_Call) RunAndReturn(run func() gin.HandlerFunc) *MockLoggingMiddleware_Log_Call {
	_c.Call.Return(run)
	return _c
}
