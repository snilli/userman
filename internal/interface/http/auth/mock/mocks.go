// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth_test

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthHandler creates a new instance of MockAuthHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthHandler {
	mock := &MockAuthHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthHandler is an autogenerated mock type for the AuthHandler type
type MockAuthHandler struct {
	mock.Mock
}

type MockAuthHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthHandler) EXPECT() *MockAuthHandler_Expecter {
	return &MockAuthHandler_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockAuthHandler
func (_mock *MockAuthHandler) Login(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockAuthHandler_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthHandler_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - c
func (_e *MockAuthHandler_Expecter) Login(c interface{}) *MockAuthHandler_Login_Call {
	return &MockAuthHandler_Login_Call{Call: _e.mock.On("Login", c)}
}

func (_c *MockAuthHandler_Login_Call) Run(run func(c *gin.Context)) *MockAuthHandler_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockAuthHandler_Login_Call) Return() *MockAuthHandler_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthHandler_Login_Call) RunAndReturn(run func(c *gin.Context)) *MockAuthHandler_Login_Call {
	_c.Run(run)
	return _c
}

// Register provides a mock function for the type MockAuthHandler
func (_mock *MockAuthHandler) Register(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockAuthHandler_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthHandler_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - c
func (_e *MockAuthHandler_Expecter) Register(c interface{}) *MockAuthHandler_Register_Call {
	return &MockAuthHandler_Register_Call{Call: _e.mock.On("Register", c)}
}

func (_c *MockAuthHandler_Register_Call) Run(run func(c *gin.Context)) *MockAuthHandler_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockAuthHandler_Register_Call) Return() *MockAuthHandler_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthHandler_Register_Call) RunAndReturn(run func(c *gin.Context)) *MockAuthHandler_Register_Call {
	_c.Run(run)
	return _c
}
