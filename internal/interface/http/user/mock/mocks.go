// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user_test

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserHandler creates a new instance of MockUserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserHandler {
	mock := &MockUserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserHandler is an autogenerated mock type for the UserHandler type
type MockUserHandler struct {
	mock.Mock
}

type MockUserHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserHandler) EXPECT() *MockUserHandler_Expecter {
	return &MockUserHandler_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserHandler
func (_mock *MockUserHandler) CreateUser(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockUserHandler_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserHandler_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - c
func (_e *MockUserHandler_Expecter) CreateUser(c interface{}) *MockUserHandler_CreateUser_Call {
	return &MockUserHandler_CreateUser_Call{Call: _e.mock.On("CreateUser", c)}
}

func (_c *MockUserHandler_CreateUser_Call) Run(run func(c *gin.Context)) *MockUserHandler_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockUserHandler_CreateUser_Call) Return() *MockUserHandler_CreateUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserHandler_CreateUser_Call) RunAndReturn(run func(c *gin.Context)) *MockUserHandler_CreateUser_Call {
	_c.Run(run)
	return _c
}

// DeleteUser provides a mock function for the type MockUserHandler
func (_mock *MockUserHandler) DeleteUser(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockUserHandler_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserHandler_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - c
func (_e *MockUserHandler_Expecter) DeleteUser(c interface{}) *MockUserHandler_DeleteUser_Call {
	return &MockUserHandler_DeleteUser_Call{Call: _e.mock.On("DeleteUser", c)}
}

func (_c *MockUserHandler_DeleteUser_Call) Run(run func(c *gin.Context)) *MockUserHandler_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockUserHandler_DeleteUser_Call) Return() *MockUserHandler_DeleteUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserHandler_DeleteUser_Call) RunAndReturn(run func(c *gin.Context)) *MockUserHandler_DeleteUser_Call {
	_c.Run(run)
	return _c
}

// GetAllUser provides a mock function for the type MockUserHandler
func (_mock *MockUserHandler) GetAllUser(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockUserHandler_GetAllUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUser'
type MockUserHandler_GetAllUser_Call struct {
	*mock.Call
}

// GetAllUser is a helper method to define mock.On call
//   - c
func (_e *MockUserHandler_Expecter) GetAllUser(c interface{}) *MockUserHandler_GetAllUser_Call {
	return &MockUserHandler_GetAllUser_Call{Call: _e.mock.On("GetAllUser", c)}
}

func (_c *MockUserHandler_GetAllUser_Call) Run(run func(c *gin.Context)) *MockUserHandler_GetAllUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockUserHandler_GetAllUser_Call) Return() *MockUserHandler_GetAllUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserHandler_GetAllUser_Call) RunAndReturn(run func(c *gin.Context)) *MockUserHandler_GetAllUser_Call {
	_c.Run(run)
	return _c
}

// GetUser provides a mock function for the type MockUserHandler
func (_mock *MockUserHandler) GetUser(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockUserHandler_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserHandler_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - c
func (_e *MockUserHandler_Expecter) GetUser(c interface{}) *MockUserHandler_GetUser_Call {
	return &MockUserHandler_GetUser_Call{Call: _e.mock.On("GetUser", c)}
}

func (_c *MockUserHandler_GetUser_Call) Run(run func(c *gin.Context)) *MockUserHandler_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockUserHandler_GetUser_Call) Return() *MockUserHandler_GetUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserHandler_GetUser_Call) RunAndReturn(run func(c *gin.Context)) *MockUserHandler_GetUser_Call {
	_c.Run(run)
	return _c
}

// UpdateUser provides a mock function for the type MockUserHandler
func (_mock *MockUserHandler) UpdateUser(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockUserHandler_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserHandler_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - c
func (_e *MockUserHandler_Expecter) UpdateUser(c interface{}) *MockUserHandler_UpdateUser_Call {
	return &MockUserHandler_UpdateUser_Call{Call: _e.mock.On("UpdateUser", c)}
}

func (_c *MockUserHandler_UpdateUser_Call) Run(run func(c *gin.Context)) *MockUserHandler_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockUserHandler_UpdateUser_Call) Return() *MockUserHandler_UpdateUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserHandler_UpdateUser_Call) RunAndReturn(run func(c *gin.Context)) *MockUserHandler_UpdateUser_Call {
	_c.Run(run)
	return _c
}
