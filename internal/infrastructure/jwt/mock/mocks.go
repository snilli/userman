// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package jwt_test

import (
	"userman/internal/infrastructure/jwt"

	mock "github.com/stretchr/testify/mock"
)

// NewMockJWTService creates a new instance of MockJWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTService {
	mock := &MockJWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJWTService is an autogenerated mock type for the JWTService type
type MockJWTService struct {
	mock.Mock
}

type MockJWTService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTService) EXPECT() *MockJWTService_Expecter {
	return &MockJWTService_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function for the type MockJWTService
func (_mock *MockJWTService) GenerateToken(userID string, role string) (*jwt.TokenDetails, error) {
	ret := _mock.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *jwt.TokenDetails
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*jwt.TokenDetails, error)); ok {
		return returnFunc(userID, role)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *jwt.TokenDetails); ok {
		r0 = returnFunc(userID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.TokenDetails)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(userID, role)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJWTService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockJWTService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userID
//   - role
func (_e *MockJWTService_Expecter) GenerateToken(userID interface{}, role interface{}) *MockJWTService_GenerateToken_Call {
	return &MockJWTService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userID, role)}
}

func (_c *MockJWTService_GenerateToken_Call) Run(run func(userID string, role string)) *MockJWTService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockJWTService_GenerateToken_Call) Return(tokenDetails *jwt.TokenDetails, err error) *MockJWTService_GenerateToken_Call {
	_c.Call.Return(tokenDetails, err)
	return _c
}

func (_c *MockJWTService_GenerateToken_Call) RunAndReturn(run func(userID string, role string) (*jwt.TokenDetails, error)) *MockJWTService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockJWTService
func (_mock *MockJWTService) ValidateToken(tokenString string) (*jwt.Claims, error) {
	ret := _mock.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.Claims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*jwt.Claims, error)); ok {
		return returnFunc(tokenString)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *jwt.Claims); ok {
		r0 = returnFunc(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Claims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(tokenString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJWTService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockJWTService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - tokenString
func (_e *MockJWTService_Expecter) ValidateToken(tokenString interface{}) *MockJWTService_ValidateToken_Call {
	return &MockJWTService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", tokenString)}
}

func (_c *MockJWTService_ValidateToken_Call) Run(run func(tokenString string)) *MockJWTService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTService_ValidateToken_Call) Return(claims *jwt.Claims, err error) *MockJWTService_ValidateToken_Call {
	_c.Call.Return(claims, err)
	return _c
}

func (_c *MockJWTService_ValidateToken_Call) RunAndReturn(run func(tokenString string) (*jwt.Claims, error)) *MockJWTService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
