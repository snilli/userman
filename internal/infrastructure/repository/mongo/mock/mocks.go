// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mongo_repository_test

import (
	"userman/internal/domain/common"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/v2/bson"
)

// NewMockModel creates a new instance of MockModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModel[T common.Entity](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModel[T] {
	mock := &MockModel[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockModel is an autogenerated mock type for the Model type
type MockModel[T common.Entity] struct {
	mock.Mock
}

type MockModel_Expecter[T common.Entity] struct {
	mock *mock.Mock
}

func (_m *MockModel[T]) EXPECT() *MockModel_Expecter[T] {
	return &MockModel_Expecter[T]{mock: &_m.Mock}
}

// FromDomain provides a mock function for the type MockModel
func (_mock *MockModel[T]) FromDomain(v T) {
	_mock.Called(v)
	return
}

// MockModel_FromDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromDomain'
type MockModel_FromDomain_Call[T common.Entity] struct {
	*mock.Call
}

// FromDomain is a helper method to define mock.On call
//   - v
func (_e *MockModel_Expecter[T]) FromDomain(v interface{}) *MockModel_FromDomain_Call[T] {
	return &MockModel_FromDomain_Call[T]{Call: _e.mock.On("FromDomain", v)}
}

func (_c *MockModel_FromDomain_Call[T]) Run(run func(v T)) *MockModel_FromDomain_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockModel_FromDomain_Call[T]) Return() *MockModel_FromDomain_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockModel_FromDomain_Call[T]) RunAndReturn(run func(v T)) *MockModel_FromDomain_Call[T] {
	_c.Run(run)
	return _c
}

// GetObjectId provides a mock function for the type MockModel
func (_mock *MockModel[T]) GetObjectId(s string) (bson.ObjectID, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectId")
	}

	var r0 bson.ObjectID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bson.ObjectID, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bson.ObjectID); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bson.ObjectID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockModel_GetObjectId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectId'
type MockModel_GetObjectId_Call[T common.Entity] struct {
	*mock.Call
}

// GetObjectId is a helper method to define mock.On call
//   - s
func (_e *MockModel_Expecter[T]) GetObjectId(s interface{}) *MockModel_GetObjectId_Call[T] {
	return &MockModel_GetObjectId_Call[T]{Call: _e.mock.On("GetObjectId", s)}
}

func (_c *MockModel_GetObjectId_Call[T]) Run(run func(s string)) *MockModel_GetObjectId_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockModel_GetObjectId_Call[T]) Return(objectID bson.ObjectID, err error) *MockModel_GetObjectId_Call[T] {
	_c.Call.Return(objectID, err)
	return _c
}

func (_c *MockModel_GetObjectId_Call[T]) RunAndReturn(run func(s string) (bson.ObjectID, error)) *MockModel_GetObjectId_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ToDomain provides a mock function for the type MockModel
func (_mock *MockModel[T]) ToDomain() T {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToDomain")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func() T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

// MockModel_ToDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToDomain'
type MockModel_ToDomain_Call[T common.Entity] struct {
	*mock.Call
}

// ToDomain is a helper method to define mock.On call
func (_e *MockModel_Expecter[T]) ToDomain() *MockModel_ToDomain_Call[T] {
	return &MockModel_ToDomain_Call[T]{Call: _e.mock.On("ToDomain")}
}

func (_c *MockModel_ToDomain_Call[T]) Run(run func()) *MockModel_ToDomain_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModel_ToDomain_Call[T]) Return(v T) *MockModel_ToDomain_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockModel_ToDomain_Call[T]) RunAndReturn(run func() T) *MockModel_ToDomain_Call[T] {
	_c.Call.Return(run)
	return _c
}
